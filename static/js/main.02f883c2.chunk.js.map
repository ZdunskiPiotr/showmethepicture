{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","users","password","pictureURL","text","fetch","then","response","json","result","setState","catch","err","console","log","stateUsers","this","className","type","id","onChange","e","target","value","toLowerCase","foundUser","find","user","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8OA2GeA,G,kNAvGbC,MAAQ,CACNC,MAAO,GACPC,SAAU,GACVC,WAAY,GACZC,KAAM,I,uDAGE,IAAD,OAuCPC,MAAM,oBACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMR,EAAQQ,EACd,EAAKC,SAAS,CAAET,aAEjBU,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAE9B,IAAMG,EAAaC,KAAKhB,MAAMC,MAwB9B,OACE,oCACE,mDACA,6BACA,6BACA,0BAAMgB,UAAU,SAAhB,8BACA,2EACA,6BACA,2BAAOC,KAAK,OAAOC,GAAG,OAAOC,SA9BZ,SAACC,GACpB,EAAKX,SAAS,CACZR,SAAUmB,EAAEC,OAAOC,MAAMC,gBAG3B,IAAMC,EAAYV,EAAWW,MAC3B,SAACC,GAAD,OAAUA,EAAKzB,WAAamB,EAAEC,OAAOC,MAAMC,iBAGzCC,EACF,EAAKf,SAAS,CACZP,WAAYsB,EAAUtB,WACtBC,KAAMqB,EAAUrB,OAGlB,EAAKM,SAAS,CACZP,WAAY,GACZC,KAAM,QAcR,yBAAKa,UAAU,SACb,6BACA,yBACEW,IAAKZ,KAAKhB,MAAMG,WAChB0B,IAAI,+EAGR,yBAAKZ,UAAU,WACb,6BACA,2BAAID,KAAKhB,MAAMI,Y,GAjGP0B,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.02f883c2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    users: \"\",\n    password: \"\",\n    pictureURL: \"\",\n    text: \"\",\n  };\n\n  render() {\n    // const users = [\n    //   {\n    //     password: \"michał\",\n    //     pictureURL: \"imagesNames/Michal.jpg\",\n    //     text: \"Hej ho, hej ho, do pracy by się szło!\",\n    //   },\n    //   {\n    //     password: \"michalina\",\n    //     pictureURL: \"imagesNames/Michalina.jpg\",\n    //     text: \"Piona gościu! Kicham, więc dyzenfykuj.\",\n    //   },\n    //   {\n    //     password: \"marcin\",\n    //     pictureURL: \"imagesNames/Marcin.jpg\",\n    //     text: \"Siła! Masa!\",\n    //   },\n    //   {\n    //     password: \"piotr\",\n    //     pictureURL: \"imagesNames/Piotr.jpg\",\n    //     text: \"Just smile!\",\n    //   },\n    //   {\n    //     password: \"behemoth\",\n    //     pictureURL: \"imagesNames/Behemot.jpg\",\n    //     text: \"Just farted.\",\n    //   },\n    //   {\n    //     password: \"mefisto\",\n    //     pictureURL: \"imagesNames/Mefisto.jpg\",\n    //     text: \"Just looking around.\",\n    //   },\n    //   {\n    //     password: \"koty\",\n    //     pictureURL: \"imagesNames/Koty.jpg\",\n    //     text: \"Inspektor Kot, inspektor Pierzchała, wydział wewnętrzny\",\n    //   },\n    // ];\n\n    fetch(\"./data/data.json\")\n      .then((response) => response.json())\n      .then((result) => {\n        const users = result;\n        this.setState({ users });\n      })\n      .catch((err) => console.log(err));\n\n    const stateUsers = this.state.users;\n\n    const handleChange = (e) => {\n      this.setState({\n        password: e.target.value.toLowerCase(),\n      });\n\n      const foundUser = stateUsers.find(\n        (user) => user.password === e.target.value.toLowerCase()\n      );\n\n      if (foundUser) {\n        this.setState({\n          pictureURL: foundUser.pictureURL,\n          text: foundUser.text,\n        });\n      } else {\n        this.setState({\n          pictureURL: \"\",\n          text: \"\",\n        });\n      }\n    };\n\n    return (\n      <>\n        <h1>Show Me The Picture</h1>\n        <br />\n        <br />\n        <span className=\"start\"> Wprowadź imię :</span>\n        <p> (człowieka lub kota, a nawet polityka)</p>\n        <br />\n        <input type=\"text\" id=\"pass\" onChange={handleChange} />\n        <div className=\"image\">\n          <br />\n          <img\n            src={this.state.pictureURL}\n            alt=\"Po wpisaniu imienia obrazek może się chwilę wczytywać\"\n          />\n        </div>\n        <div className=\"message\">\n          <br />\n          <p>{this.state.text}</p>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}